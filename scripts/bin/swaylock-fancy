#!/usr/bin/env bash
# Author: Brandon Mittman <brandonmittman@gmail.com>
# Dependencies: imagemagick, grim (optional)
set -o errexit -o noclobber -o nounset

hue=(-level "0%,100%,0.6")
effect=(-filter Gaussian -resize 20% -define "filter:sigma=1.5" -resize 500.5%)
# find font string with "convert -list font"
font=Hack-Bold-Nerd-Font-Complete
desktop=""
swaylock_cmd=(swaylock)
text="Type password to unlock"

# Need these to capture multiple monitors' screenshots
declare -a outputs
declare -a images

# parse the json swaymsg for outputs
# poutputs=$(swaymsg -t get_outputs | grep name | sed 's/.*:.*\"\(.*\)\".*/\1/')
poutputs=$(swaymsg -t get_outputs -r | jq -r '.[] | select(.active==true) | .name')
while read -r line; do
    outputs+=($line)
    images+=($(mktemp --suffix=.png))
done <<< "$poutputs"

# move pipefail down as for some reason "convert -list font" returns 1
set -o pipefail
trap 'rm -f "${images[*]}"' EXIT
temp="$(getopt -o :hdnpglt:f: -l desktop,help,listfonts,nofork,pixelate,greyscale,text:,font: --name "$0" -- "$@")"
eval set -- "$temp"

arraylen=${#outputs[@]}
for (( i=0; i<${arraylen}; i++ ));
do
    command -- "grim" -o "${outputs[$i]}" "${images[$i]}"

    value="60" #brightness value to compare to

    color=$(convert "${images[$i]}" -gravity center -crop 100x100+0+0 +repage -colorspace hsb \
    -resize 1x1 txt:- | awk -F '[%$]' 'NR==2{gsub(",",""); printf "%.0f\n", $(NF-1)}');

    if (( $i == 0 )); then
        if [[ $color -gt $value ]]; then #white background image and black text
            bw="black"
            icon="$HOME/.local/share/swaylock-fancy/icons/lockdark.png"
        else #black
            bw="white"
            icon="$HOME/.local/share/swaylock-fancy/icons/lock.png"
        fi
    fi

    param+=("-i" "${outputs[$i]}:${images[$i]}")

    convert "${images[$i]}" "${hue[@]}" "${effect[@]}" -font "$font" -pointsize 26 -fill "$bw" -gravity center \
        -annotate +0+160 "$text" "$icon" -gravity center -composite "${images[$i]}"
done

# If invoked with -d/--desktop, we'll attempt to minimize all windows (ie. show
# the desktop) before locking.
${desktop} ${desktop:+-k on}

# try to use swaylock with prepared parameters
if ! "${swaylock_cmd[@]}" "${param[@]}" >/dev/null 2>&1; then
    # We have failed, lets get back to stock one
    "${swaylock_cmd[@]}"
fi

# As above, if we were passed -d/--desktop, we'll attempt to restore all windows
# after unlocking.
${desktop} ${desktop:+-k off}
